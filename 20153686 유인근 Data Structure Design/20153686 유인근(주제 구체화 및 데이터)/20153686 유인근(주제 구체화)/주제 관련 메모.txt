< Data Structure Design - Individual Project >

"Dynamic Graph in Real World"

- Topic : Road Trip with the Cheapest Oil Price (가장 저렴한 기름값으로, 장거리 자동차 여행하기)

(제목 영어로 작문한 거 맞는 말인가?)
(Road Trip(장거리 자동차 여행)은 의미상 지은 이름이고, 핵심은 다른 지역을 자동차로 고속도로를 경유하면서 이동하는데, 이때 가장 저렴한 기름값으로 이동하기)

- 구현하고자 하는 프로그램은 다음과 같다. (JAVA로 구현)

1. 사용자로부터 여행(방문)하고자 하는 여러 지역을 "일자별로" 선택받는다. (여행기간 및 일자별 방문할 도시 입력)
(출발지 및 여행(방문) 지역 선택 -> 서울 대전 대구 인천 부산 울산 광주 창원 등 대도시 위주)

ex) 사용자가 다음과 같이 입력 

여행 기간 : 9월 1일 ~ 9월 4일 (3박 4일)

9월 1일(1일차) : 서울 -> 대구
9월 2일(2일차) : 대구 -> 울산 
9월 3일(3일차) : 울산 -> 부산 -> 창원
9월 4일(4일차) : 창원 -> 대전 -> 서울 (출발지로 되돌아 옴)

2. 일자별 이동 고속도로와 고속도로 동선상에 있는 주유소 및 유가 안내
  (네이버 지도, 카카오 네비, 한국석유공사 Opinet 일자별 Data 등을 활용)
 
ex)

9월 1일(1일차) : 서울 -> 대구                  :  "경부고속도로", 동선상에 있는 주유소(Node) 그리고 각각의 기름값(Weight_1) 및 기름의 양(Weight_2) 안내
9월 2일(2일차) : 대구 -> 울산                  :  "중앙고속도로", 동선상에 있는 주유소(Node) 그리고 각각의 기름값(Weight_1) 및 기름의 양(Weight_2) 안내
9월 3일(3일차) : 울산 -> 부산 -> 창원        :  "경부고속도로", "남해제2고속도로지선", 동선상에 있는 주유소(Node) 그리고 각각의 기름값(Weight_1) 및 기름의 양(Weight_2) 안내
9월 4일(4일차) : 창원 -> 대전 -> 서울        :  "중부내륙고속도로", "경부고속도로", 동선상에 있는 주유소(Node) 그리고 각각의 기름값(Weight_1) 및 기름의 양(Weight_2) 안내

3. 여행(방문)기간 동안 가장 저렴하게 기름값을 지불할 수 있는 주유소 및 "기름값(Weight_1)", "주유할 기름의 양(Weight_2)" 안내

(주의) 이때 다음 지역으로 가는 길에 주유소 2개 이상 이용 가능.
예를 들어, 서울에서 대전으로 가는데 서울에서 출발 후 기름이 다 떨어지기 전까지 도달할 수 있는 가장 저렴한 주유소에 처음에 기름을 조금만 넣고,
그 다음으로 가는 길에 가장 저렴한 주유소가 있다면 주유소를 2개 이용할 수 있게 됩니다.
즉, 하나의 경로 상에서 두 개 이상의 주유소를 이용하는 것이 어떤 하나의 주유소를 이용하는 것보다 기름값이 저렴하다면, 두 개 이상의 주유소를 이용하는 것을 추천.

(이 부분 중요하므로, 그림 그려서 잘 설명하자)

4. 총 기름값이 얼마가 들었는지, 가장 비싼 기름값 혹은 평균 기름값 들과 비교해서 얼마나 차이나는지를 보여줌

- 이 프로젝트가 Dynamic Graph인 이유

Node : 도시 및 주유소 (고속도로에 동선상에 有), (도시는 Weight가 없는 Node)
Edge : 고속도로 길
Weight(2개) : Node(주유소)의 기름값(Weight_1), 넣어야 하는 기름의 양(Weight_2)

=> 주유소의 기름값은 하루마다 갱신되므로, Weight의 값은 하루 단위로 바뀌기 때문에 Dynamic 하게 표현할 수 있다고 생각.
    But, 한 주유소에서 기름값이 변화하는 폭이 크지 않고 기름값이 오르거나 내리는 시기가 대부분의 주유소가 비슷함. (일정한 주유소들도 많지만)
    그러나, 기간이 길다면 폭이 점점 커지는 것을 발견, 그래서 여행 기간이 길수록 의미 있는 값을 측정 가능, 또한 The Cheapest Oil Price를 찾는 것에 큰 의미. 

- 측정가능한 의미 있는 정보 

=> Road Trip with the Cheapest Oil Price : 과거 데이터지만, 장거리 여행 동안에 가장 저렴한 기름값을 측정 할 수 있음 
=> Community : 주변 경쟁 주유소들간의 관계, 영향
=> Centrality : 기름값이 가장 저렴한 주유소 (가장 많은 사람이 이용할 가능성이 높으므로)

< 전제조건>

- Opinet에 등록되어 있는 고속도로 상에 있는 주유소만을 이용 (고속도로를 벗어난 지역은 Data가 너무 많아 고려하기 힘듬)

- 고속도로 선택시, 교통상황 등의 요소를 고려하지 않음(너무 복잡). 고속도로 선택 기준은 Only Distance!

- 사실상 하루안에 모두 방문하기 힘든 코스라도 고려하지 않음. ( ex) 1일차 -> 서울 -> 부산 -> 대구 -> 대전 -> 울산... )
  각 방문 지역에서 소비되는 시간 계산 불가
  24시간이 넘든 안 넘든... 사용자가 입력한 대로 프로그램 수행

- 거리가 비슷한 고속도로들은 기준을 세워서 하나만 선택하자! ( ex) 서울-> 부산, 경부고속도로 vs 중부내륙고속도로 )

< 고려사항 > (후에 전제조건들이 될 사항들)

- 방문 도시는 몇개까지 표현할까?

- 차종에 따라 기름 종류, 연비 다른데 어디까지 세분화해서 구현할까? (일단 하나에 대해 구현을 완료한 뒤, 차차 늘려나가는 것으로 방향을 잡자)

- 여행기간 제한을 얼마로 둘까?

- 동선상에 있는 주유소만을 어떻게 검색할까? ( ex) "대전 -> 대구"는 "경부고속도로"의 일부! "경부고속도로" 전체에는 많은 주유소들이 존재...)

-> 지금까지 알아본 바로는 Opinet상에는 주유소 위치를 고속도로 별로만 알려줌.

- 고속도로 이름 안에 또 다른 고속도로가 있는건가? (공부 필요)

- 하루가 끝나는 시점에서는 기름을 얼마를 남긴다고 가정할까?

< 주의사항 >

- 실제 데이터를 바탕으로 해야하기 때문에, 데이터의 정확성 검토 중요

- 고속도로 상행선, 하행선 주의해서 데이터 추출

- Dynamic이 묻어나는 데이터를 표현해야 한다.

- 이 많은 데이터를 어떻게 입력하지?

- 교수님 및 조교님께 질문 많이하기

- Graph 코딩 공부 (실제로 구현하는 것이 중요)